# 
# ## Refernces
# 
# https://circleci.com/docs/2.0/language-javascript/
# https://circleci.com/docs/2.0/yarn/
# https://hub.docker.com/r/circleci/node
# https://circleci.com/docs/2.0/caching/#yarn-node
# 
# 
# To validate this config, run the following command.
# 
# - `circleci config validate`
# 


version: 2 # use CircleCI 2.0

attach_workspace_step_alias: &attach_workspace_step_alias
  attach_workspace:
    at: ~/workdir
defaults: &defaults
  working_directory: ~/workdir # directory where steps will run
  docker: # run the steps with Docker
    - image: circleci/node:12.8.0 # ...with this image as the primary container; this is where all `steps` will run

jobs: # a collection of steps
  install-dependencies:
    <<: *defaults
    steps:
      # Check out source code to working directory
      - checkout

      # Restore the dependency cache
      # https://circleci.com/docs/2.0/caching/#yarn-node
      - restore_cache:
          # name: Restore Yarn Package Cache
          keys:
            # Find the most recently generated cache used from any branch
            # https://circleci.com/docs/2.0/caching/#restoring-cache
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-
      - run:
          name: Install Dependencies
          # `--frozen-lockfile` https://yarnpkg.com/lang/en/docs/cli/install/
          # command: yarn install --frozen-lockfile
          command: yarn install
      - save_cache:
          # name: Save Yarn Package Cache
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - persist_to_workspace:
          root: .
          paths: 
            - .

  typecheck:
    <<: *defaults
    steps:
      - *attach_workspace_step_alias
      # 
      # Type Check
      # 
      - restore_cache:
          # name: Restore Yarn Package Cache
          keys:
            - tsc-{{ .Branch }}
            - tsc-
      - run: # type check
          name: type check
          command: yarn run type-check-ci
      - save_cache:
          # name: Save tsc Cache
          key: tsc-{{ .Branch }}
          paths:
            - ./build

  lint:
    <<: *defaults
    steps:
      - *attach_workspace_step_alias
      # 
      # Lint
      # 
      - restore_cache:
          # name: Restore Yarn Package Cache
          keys:
            - eslint-{{ .Branch }}-{{ checksum ".eslintcache" }}
            - eslint-{{ .Branch }}-
            - eslint-
      - run: # run lint
          name: lint
          command: yarn run lint
      - save_cache:
          # name: Save ESlint Cache
          key: eslint-{{ .Branch }}-{{ checksum ".eslintcache" }}
          paths:
            - .eslintcache

  release: # runs not using Workflows must have a `build` job as entry point
    <<: *defaults
    steps: # a collection of executable commands
      - *attach_workspace_step_alias

      # 
      # ======  Release  ======
      # 
      # by "semantic-release"
      # 
      # https://support.circleci.com/hc/en-us/articles/360015562253-Conditionally-end-a-running-job-gracefully
      # "semantic-release": "if [ \"${CIRCLE_BRANCH}\" == \"master\" ]; then yarn semantic-release; fi"
      - run:
          name: release
          command: yarn run semantic-release || true
      # - run: # run tests
      #     name: test
      #     command: yarn test
      # - run: # run coverage report
      #     name: code-coverage
      #     command: './node_modules/.bin/nyc report --reporter=text-lcov'
      # - store_artifacts: # special step to save test results as as artifact
      #     # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/ 
      #     path: test-results.xml
      #     prefix: tests
      # - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/ 
      #     path: coverage
      #     prefix: coverage
      # - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
      #     path: test-results.xml
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples

# https://circleci.com/docs/2.0/workflows/#branch-level-job-execution
workflows:
  version: 2
  build-test-release:
    jobs:
      - install-dependencies
      - typecheck:
          requires:
            - install-dependencies
      - lint:
          requires:
            - install-dependencies
      - release:
          filters:  # using regex filters requires the entire branch to match
            branches:
              only: master
          requires:
            - typecheck
            - lint
